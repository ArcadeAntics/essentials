useDynLib(essentials, .registration = TRUE, .fixes = "C_")


export(isMissingArg)


importFrom(methods, coerce)
exportClass(numbers)
exportMethods(coerce)


export(as.scalar.logical)
export(as.scalar.integer)
export(as.scalar.real, as.scalar.double, as.scalar.numeric)
export(as.scalar.complex)
export(as.scalar.number)
export(as.scalar.string, as.scalar.character)
export(as.scalar.raw)
export(as.scalar)
export(is.scalar)
export(aslength1)


export(numbers, is.numbers, as.numbers)
S3method(is.numbers, default)
S3method(as.numbers, default)


export(IDW)


export(flat.list, hypot, phypot, listify, strip)
export(wrapper)


importFrom(utils, assignInMyNamespace)
export("%while%", "%until%")  # do while loop


# dir.copy.R           ----


export(dir.copy)


# envvars.R            ----


export(envvars, getEnvvar)


# GeneralizedExtremeValue.R ----


export(dgev, pgev, qgev, rgev)


# graphics essentials  ----


importFrom(graphics, par, plot.default, xinch, yinch)
importFrom(grDevices, dev.cur, dev.off, dev.set, devAskNewPage, png)
export(legend.dimensions, add.legend)
export(legendPart, "legendPart<-")
export(fix.xlog, fix.ylog, adj.margins, location, "location<-")


importFrom(graphics, image, par)
export(show.colors)


# grDevices essentials ----


importFrom(grDevices, colorRamp, hcl.pals)
export(as.colorRampPalette, hcl.colors2)
export(inferno.colors, plasma.colors, viridis.colors)


importFrom(grDevices, hcl)
export(gg.colors)


importFrom(grDevices, col2rgb, rgb)
export(color.with.alpha, as.hex.code)


# ASCII.R              ----


importFrom(graphics, par, plot, text, axis)
export(ASCII)


# asWindowsbasename.R  ----


export(asWindowsbasename)


# dir.choose.R         ----


export(dir.choose)


# extension.R          ----


export(ext, extension, rm.ext, remove.extension)


# plapply.R            ----


export(.plapply, plapply)
export(.psapply, psapply)
export(.pvapply, pvapply)


# progressBar.R        ----


export(setProgressBarMethod, progressBar, getProgress, setProgress, increment, decrement)


S3method(getProgress, tkProgressBar)
S3method(getProgress, txtProgressBar)
S3method(getProgress, winProgressBar)


S3method(setProgress, tkProgressBar)
S3method(setProgress, txtProgressBar)
S3method(setProgress, winProgressBar)


S3method(increment, default)
S3method(increment, tkProgressBar)
S3method(increment, txtProgressBar)
S3method(increment, winProgressBar)


S3method(decrement, default)
S3method(decrement, tkProgressBar)
S3method(decrement, txtProgressBar)
S3method(decrement, winProgressBar)


# readlineQuoted.R     ----


export(readlineQuoted)


# regexencode.R        ----


export(regexencode)


# rowmatch             ----


export(.duplicated.data.frame_transform)


export(rowmatch, "%rowin%")
export(row.match, row.match.data.frame, "%row.in%")
exportMethods(row.match)


# Runge-KuttaMethods.R ----


export(EulerMethod, RK1)
export(ImprovedEulerMethod, RK2)
export(RungeKuttaMethod, RK4)


# toProv.R             ----


export(toProv, toProv2, toProvince)


# tryExcept.R          ----


export(tryExcept)


# zap                  ----


importFrom(utils, read.table, read.csv, read.csv2, read.delim, read.delim2)
export(zap, zap.table, zap.csv, zap.csv2, zap.delim, zap.delim2)


export(tempname)
