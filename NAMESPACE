useDynLib(essentials, .registration = TRUE, .fixes = "C_")


importFrom(this.path, here)
importFrom(this.path, this.dir2)



export(flat.list, hypot, phypot, listify, strip, strsplit2, IDW,
    isMissingArg)


# ArgumentParser-class.R    ----


importFrom(methods, classLabel, is, new)
exportClasses("essentials_ArgumentParser")
importFrom(this.path, this.path)
export(ArgumentParser)


S3method(print, "essentials_ArgumentParser")


S3method("$", ParsedArgs)
S3method("$<-", ParsedArgs)
S3method(as.list, ParsedArgs)
S3method(print, ParsedArgs)
export(Commands, Missing)


# ASCII.R                   ----


importFrom(graphics, par, plot, text, axis)
export(ASCII)


# asWindowsbasename.R       ----


export(asWindowsbasename)


# commandArgs.R             ----


S3method(print, formalCommandArg)


# dedent.R                  ----


export(dedent)


# delayedAssign2.R          ----


export(delayedAssign2, mkPROMISE)


# dir.choose.R              ----


export(dir.choose)


# dir.copy.R                ----


export(dir.copy)


# do.expr.R                 ----


export(quoteLang, do.expr)


# do.while.R                ----


export("%while%", "%until%")


# envvars.R                 ----


export(envvars, getEnvvar)


# extension.R               ----


export(ext, extension, rm.ext, remove.extension)


# f.str.R                   ----


export(f.str)


# file.open.R               ----


export(file.open)


# GeneralizedExtremeValue.R ----


export(dgev, pgev, qgev, rgev)


# graphics essentials       ----


importFrom(graphics, par, plot.default, xinch, yinch)
importFrom(grDevices, dev.cur, dev.off, dev.set, devAskNewPage, png)
export(legend.dimensions, add.legend)
export(legendPart, "legendPart<-")
export(fix.xlog, fix.ylog, adj.margins, location, "location<-")


importFrom(graphics, image, par)
export(show.colors)


# grDevices essentials      ----


importFrom(grDevices, colorRamp, hcl.pals)
export(as.colorRampPalette, hcl.colors2)
export(inferno.colors, plasma.colors, viridis.colors)


importFrom(grDevices, hcl)
export(gg.colors)


importFrom(grDevices, col2rgb, rgb)
export(color.with.alpha, as.hex.code)


# list.files2.R             ----


export(list.files2, dir2, list.dirs2)


# mfor.R                    ----


export(mfor)


# normalizeAgainst.R        ----


importFrom(this.path, this.dir)
export(normalizeAgainst, .normalizePath)


# numbers.R                 ----


exportClass(numbers)
importFrom(methods, coerce)
exportMethods(coerce)


export(numbers, is.numbers, as.numbers)
S3method(is.numbers, default)
S3method(as.numbers, default)


# path.contract.R           ----


export(path.contract)


# plapply.R                 ----


export(.plapply, plapply)
export(.psapply, psapply)
export(.pvapply, pvapply)


# progressBar.R             ----


export(setProgressBarMethod, progressBar, getProgress, setProgress, increment, decrement)


S3method(getProgress, tkProgressBar)
S3method(getProgress, txtProgressBar)
S3method(getProgress, winProgressBar)


S3method(setProgress, tkProgressBar)
S3method(setProgress, txtProgressBar)
S3method(setProgress, winProgressBar)


S3method(increment, default)
S3method(increment, tkProgressBar)
S3method(increment, txtProgressBar)
S3method(increment, winProgressBar)


S3method(decrement, default)
S3method(decrement, tkProgressBar)
S3method(decrement, txtProgressBar)
S3method(decrement, winProgressBar)


# pseduoglobalenv.R         ----


export(pseudoglobalenv)


# R.R                       ----


export(python)
export(R, Rcmd, Rscript, Rterm)


# readArgs.R                ----


export(has.ext, scan2, format4scan, setReadWriteArgsMethod)
export(writeArgs, readArgs)


# readlineQuoted.R          ----


export(readlineQuoted)


# regexencode.R             ----


export(regexencode)


# rowmatch                  ----


export(.duplicated.data.frame_transform)


export(rowmatch, "%rowin%")
export(row.match, row.match.data.frame, "%row.in%")
exportMethods(row.match)


# Runge-KuttaMethods.R      ----


export(EulerMethod, RK1)
export(ImprovedEulerMethod, RK2)
export(RungeKuttaMethod, RK4)


# scalars.R                 ----


export(as.scalar.logical)
export(as.scalar.integer)
export(as.scalar.real, as.scalar.double, as.scalar.numeric)
export(as.scalar.complex)
export(as.scalar.number)
export(as.scalar.string, as.scalar.character)
export(as.scalar.raw)
export(as.scalar)
export(is.scalar)
export(aslength1)


# seq2.R                    ----


export(seq2)


# shEncode.R                ----


export(shEncode, commandEncode, commandQuote)


# shPrompt.R                ----


export(shPrompt)


# toProv.R                  ----


export(toProv, toProv2, toProvince)


# tryExcept.R               ----


export(tryExcept)


# withArgs.R                ----


importFrom(this.path, this.path2)
export(Args, withArgs)


# wrapper.R                 ----


export(wrapper)


# zap                       ----


importFrom(utils, read.table, read.csv, read.csv2, read.delim, read.delim2)
export(zap, zap.table, zap.csv, zap.csv2, zap.delim, zap.delim2)


export(tempname)
